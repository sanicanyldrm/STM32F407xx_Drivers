
STM32_F407xx_CDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f58  08000f58  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  08000f58  08000f58  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f58  08000f58  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00001f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000f60  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002014  2**0
                  CONTENTS
 10 .bss          00000058  20000014  20000014  00002014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00002014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017e8  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f8  00000000  00000000  0000382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00003f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000123  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000289c  00000000  00000000  000041db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000257b  00000000  00000000  00006a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a65d  00000000  00000000  00008ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001364f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000056c  00000000  00000000  00013694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00013c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f40 	.word	0x08000f40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08000f40 	.word	0x08000f40

080001c8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80001ce:	4b25      	ldr	r3, [pc, #148]	@ (8000264 <RCC_GetPCLK1Value+0x9c>)
 80001d0:	689b      	ldr	r3, [r3, #8]
 80001d2:	089b      	lsrs	r3, r3, #2
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	f003 0303 	and.w	r3, r3, #3
 80001da:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80001dc:	7a7b      	ldrb	r3, [r7, #9]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d102      	bne.n	80001e8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80001e2:	4b21      	ldr	r3, [pc, #132]	@ (8000268 <RCC_GetPCLK1Value+0xa0>)
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	e00b      	b.n	8000200 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80001e8:	7a7b      	ldrb	r3, [r7, #9]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d102      	bne.n	80001f4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80001ee:	4b1f      	ldr	r3, [pc, #124]	@ (800026c <RCC_GetPCLK1Value+0xa4>)
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	e005      	b.n	8000200 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80001f4:	7a7b      	ldrb	r3, [r7, #9]
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d102      	bne.n	8000200 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80001fa:	f000 f88d 	bl	8000318 <RCC_GetPLLOutputClock>
 80001fe:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000200:	4b18      	ldr	r3, [pc, #96]	@ (8000264 <RCC_GetPCLK1Value+0x9c>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	091b      	lsrs	r3, r3, #4
 8000206:	b2db      	uxtb	r3, r3
 8000208:	f003 030f 	and.w	r3, r3, #15
 800020c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800020e:	7a3b      	ldrb	r3, [r7, #8]
 8000210:	2b07      	cmp	r3, #7
 8000212:	d802      	bhi.n	800021a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000214:	2301      	movs	r3, #1
 8000216:	72fb      	strb	r3, [r7, #11]
 8000218:	e005      	b.n	8000226 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800021a:	7a3b      	ldrb	r3, [r7, #8]
 800021c:	3b08      	subs	r3, #8
 800021e:	4a14      	ldr	r2, [pc, #80]	@ (8000270 <RCC_GetPCLK1Value+0xa8>)
 8000220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000224:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000226:	4b0f      	ldr	r3, [pc, #60]	@ (8000264 <RCC_GetPCLK1Value+0x9c>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	0a9b      	lsrs	r3, r3, #10
 800022c:	b2db      	uxtb	r3, r3
 800022e:	f003 0307 	and.w	r3, r3, #7
 8000232:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000234:	7a3b      	ldrb	r3, [r7, #8]
 8000236:	2b03      	cmp	r3, #3
 8000238:	d802      	bhi.n	8000240 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	72bb      	strb	r3, [r7, #10]
 800023e:	e004      	b.n	800024a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000240:	7a3b      	ldrb	r3, [r7, #8]
 8000242:	3b04      	subs	r3, #4
 8000244:	4a0b      	ldr	r2, [pc, #44]	@ (8000274 <RCC_GetPCLK1Value+0xac>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
 8000248:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800024a:	7afb      	ldrb	r3, [r7, #11]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000252:	7abb      	ldrb	r3, [r7, #10]
 8000254:	fbb2 f3f3 	udiv	r3, r2, r3
 8000258:	607b      	str	r3, [r7, #4]

	return pclk1;
 800025a:	687b      	ldr	r3, [r7, #4]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40023800 	.word	0x40023800
 8000268:	00f42400 	.word	0x00f42400
 800026c:	007a1200 	.word	0x007a1200
 8000270:	20000000 	.word	0x20000000
 8000274:	20000010 	.word	0x20000010

08000278 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000282:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <RCC_GetPCLK2Value+0x8c>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	089b      	lsrs	r3, r3, #2
 8000288:	b2db      	uxtb	r3, r3
 800028a:	f003 0303 	and.w	r3, r3, #3
 800028e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000290:	7a7b      	ldrb	r3, [r7, #9]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000296:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <RCC_GetPCLK2Value+0x90>)
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e001      	b.n	80002a0 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800029c:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <RCC_GetPCLK2Value+0x94>)
 800029e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80002a0:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <RCC_GetPCLK2Value+0x8c>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d802      	bhi.n	80002b8 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80002b2:	2301      	movs	r3, #1
 80002b4:	72fb      	strb	r3, [r7, #11]
 80002b6:	e005      	b.n	80002c4 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3b08      	subs	r3, #8
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <RCC_GetPCLK2Value+0x98>)
 80002be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c2:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <RCC_GetPCLK2Value+0x8c>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	0b5b      	lsrs	r3, r3, #13
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d802      	bhi.n	80002dc <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	72bb      	strb	r3, [r7, #10]
 80002da:	e004      	b.n	80002e6 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3b04      	subs	r3, #4
 80002e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000314 <RCC_GetPCLK2Value+0x9c>)
 80002e2:	5cd3      	ldrb	r3, [r2, r3]
 80002e4:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80002e6:	7afb      	ldrb	r3, [r7, #11]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80002ee:	7abb      	ldrb	r3, [r7, #10]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	603b      	str	r3, [r7, #0]

	return pclk2;
 80002f6:	683b      	ldr	r3, [r7, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	00f42400 	.word	0x00f42400
 800030c:	007a1200 	.word	0x007a1200
 8000310:	20000000 	.word	0x20000000
 8000314:	20000010 	.word	0x20000010

08000318 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <USART_PeriClockControl>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d127      	bne.n	800038a <USART_PeriClockControl+0x62>
	{
		if(pUSARTx == USART1)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a29      	ldr	r2, [pc, #164]	@ (80003e4 <USART_PeriClockControl+0xbc>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000342:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000346:	4a28      	ldr	r2, [pc, #160]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000348:	f043 0310 	orr.w	r3, r3, #16
 800034c:	6453      	str	r3, [r2, #68]	@ 0x44
		else
		{
			USART6_PCLK_DI();
		}
	}
}
 800034e:	e043      	b.n	80003d8 <USART_PeriClockControl+0xb0>
		else if(pUSARTx == USART2)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a26      	ldr	r2, [pc, #152]	@ (80003ec <USART_PeriClockControl+0xc4>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <USART_PeriClockControl+0x3e>
			USART2_PLCK_EN();
 8000358:	4b23      	ldr	r3, [pc, #140]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800035c:	4a22      	ldr	r2, [pc, #136]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000362:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000364:	e038      	b.n	80003d8 <USART_PeriClockControl+0xb0>
		else if(pUSARTx == USART3)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a21      	ldr	r2, [pc, #132]	@ (80003f0 <USART_PeriClockControl+0xc8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800036e:	4b1e      	ldr	r3, [pc, #120]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000372:	4a1d      	ldr	r2, [pc, #116]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000378:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800037a:	e02d      	b.n	80003d8 <USART_PeriClockControl+0xb0>
			USART6_PCLK_EN();
 800037c:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 800037e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000380:	4a19      	ldr	r2, [pc, #100]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000388:	e026      	b.n	80003d8 <USART_PeriClockControl+0xb0>
		if(pUSARTx == USART1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <USART_PeriClockControl+0xbc>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <USART_PeriClockControl+0x78>
			USART1_PCLK_DI();
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000396:	4a14      	ldr	r2, [pc, #80]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 8000398:	f023 0310 	bic.w	r3, r3, #16
 800039c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800039e:	e01b      	b.n	80003d8 <USART_PeriClockControl+0xb0>
		else if(pUSARTx == USART2)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a12      	ldr	r2, [pc, #72]	@ (80003ec <USART_PeriClockControl+0xc4>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <USART_PeriClockControl+0x8e>
			USART2_PLCK_DI();
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ac:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003ae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80003b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80003b4:	e010      	b.n	80003d8 <USART_PeriClockControl+0xb0>
		else if(pUSARTx == USART3)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <USART_PeriClockControl+0xc8>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <USART_PeriClockControl+0xa4>
			USART3_PCLK_DI();
 80003be:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c2:	4a09      	ldr	r2, [pc, #36]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80003ca:	e005      	b.n	80003d8 <USART_PeriClockControl+0xb0>
			USART6_PCLK_DI();
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d0:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <USART_PeriClockControl+0xc0>)
 80003d2:	f023 0320 	bic.w	r3, r3, #32
 80003d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40004400 	.word	0x40004400
 80003f0:	40004800 	.word	0x40004800

080003f4 <USART_PeripheralControl>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d106      	bne.n	8000414 <USART_PeripheralControl+0x20>
			{
				pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	60da      	str	r2, [r3, #12]
			}
			else
			{
				pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
			}
}
 8000412:	e005      	b.n	8000420 <USART_PeripheralControl+0x2c>
				pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	60da      	str	r2, [r3, #12]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <USART_GetFlagStatus>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	uint8_t ret_val;
	if(pUSARTx->SR & FlagName)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	4013      	ands	r3, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <USART_GetFlagStatus+0x1c>
	{
		ret_val = FLAG_SET;
 8000442:	2301      	movs	r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	e001      	b.n	800044c <USART_GetFlagStatus+0x20>
	}
	else
	{
		ret_val = FLAG_RESET;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;
 800044c:	7bfb      	ldrb	r3, [r7, #15]




}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <USART_Init>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b084      	sub	sp, #16
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
	/******************************** Configuration of CR1******************************************/
	//Temp Register
	uint32_t tempRegister = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]

	//Enables the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2101      	movs	r1, #1
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff5b 	bl	8000328 <USART_PeriClockControl>

	//Enables USART Tx and Rx engines according to the USART_Mode configuration item
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <USART_Init+0x2a>
	{
		tempRegister |= (1 << USART_CR1_TE);
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f043 0308 	orr.w	r3, r3, #8
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	e00c      	b.n	800049e <USART_Init+0x44>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d104      	bne.n	8000496 <USART_Init+0x3c>
	{
		tempRegister |= (1 << USART_CR1_RE);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e003      	b.n	800049e <USART_Init+0x44>
	}
	else
	{
		tempRegister |= ((1 << USART_CR1_TE) | (1 << USART_CR1_RE));
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f043 030c 	orr.w	r3, r3, #12
 800049c:	60fb      	str	r3, [r7, #12]
	}

	//Code to configure the Word length configuration item
	tempRegister |= (pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7b5b      	ldrb	r3, [r3, #13]
 80004a2:	031b      	lsls	r3, r3, #12
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]

	//Configure of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7b9b      	ldrb	r3, [r3, #14]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d104      	bne.n	80004bc <USART_Init+0x62>
	{
		tempRegister |= (1 << USART_CR1_PCE);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e00b      	b.n	80004d4 <USART_Init+0x7a>


	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7b9b      	ldrb	r3, [r3, #14]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d107      	bne.n	80004d4 <USART_Init+0x7a>
	{
		tempRegister |= (1 << USART_CR1_PCE);
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ca:	60fb      	str	r3, [r7, #12]

		tempRegister |= (1 << USART_CR1_PS);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d2:	60fb      	str	r3, [r7, #12]
	else
	{
		//do nothing
	}

	pUSARTHandle->pUSARTx->CR1 = tempRegister;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/
	tempRegister = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

	//Code to configure the number of stop bits inserted during USART frame transmission
	tempRegister |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7b1b      	ldrb	r3, [r3, #12]
 80004e4:	031b      	lsls	r3, r3, #12
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]

	if(pUSARTHandle->USART_Config.USART_LINMode == USART_LIN_MODE_ENABLE)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7c1b      	ldrb	r3, [r3, #16]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d105      	bne.n	8000500 <USART_Init+0xa6>
	{
		tempRegister |= ( pUSARTHandle->USART_Config.USART_LINMode << USART_CR2_LINEN );
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7c1b      	ldrb	r3, [r3, #16]
 80004f8:	039b      	lsls	r3, r3, #14
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
	else
	{
		//do nothing
	}

	pUSARTHandle->pUSARTx->CR2 = tempRegister;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	611a      	str	r2, [r3, #16]



	/******************************** Configuration of CR3******************************************/

	tempRegister = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
	//Configuration of USART hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7bdb      	ldrb	r3, [r3, #15]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d103      	bne.n	800051c <USART_Init+0xc2>
	{
		tempRegister |= (1 << USART_CR3_CTSE);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800051a:	60fb      	str	r3, [r7, #12]
	}
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7bdb      	ldrb	r3, [r3, #15]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d104      	bne.n	800052e <USART_Init+0xd4>
	{
		tempRegister |= (1 << USART_CR3_RTSE);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e00b      	b.n	8000546 <USART_Init+0xec>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7bdb      	ldrb	r3, [r3, #15]
 8000532:	2b03      	cmp	r3, #3
 8000534:	d107      	bne.n	8000546 <USART_Init+0xec>
	{
		tempRegister |= (1 << USART_CR3_CTSE);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800053c:	60fb      	str	r3, [r7, #12]
		tempRegister |= (1 << USART_CR3_RTSE);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000544:	60fb      	str	r3, [r7, #12]
	else
	{
		//do nothing
	}

	pUSARTHandle->pUSARTx->CR3 = tempRegister;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	4619      	mov	r1, r3
 8000558:	4610      	mov	r0, r2
 800055a:	f000 f857 	bl	800060c <USART_SetBaudRate>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <USART_SendData>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
	uint16_t *pData = NULL;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]

	//Send data until all data is transferred
	uint32_t i;
	for(i = 0; i < Len; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	e033      	b.n	80005e4 <USART_SendData+0x7e>
	{
		//Wait until TXE is set
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 800057c:	bf00      	nop
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2180      	movs	r1, #128	@ 0x80
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff51 	bl	800042c <USART_GetFlagStatus>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f6      	beq.n	800057e <USART_SendData+0x18>

		//Check is 9 bits or 8 bits
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	7b5b      	ldrb	r3, [r3, #13]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d11a      	bne.n	80005ce <USART_SendData+0x68>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			*pData = (uint16_t*)pTxBuffer;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	b29a      	uxth	r2, r3
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	801a      	strh	r2, [r3, #0]
			pUSARTHandle->pUSARTx->DR = (*pData & (uint16_t)0x01FF);
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ae:	605a      	str	r2, [r3, #4]

			//Check parity control
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	7b9b      	ldrb	r3, [r3, #14]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d106      	bne.n	80005c6 <USART_SendData+0x60>
			{
				pTxBuffer++;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	e00b      	b.n	80005de <USART_SendData+0x78>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	e007      	b.n	80005de <USART_SendData+0x78>
		}
		else
		{
			//8bit data transfer
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3301      	adds	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < Len; i++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3c7      	bcc.n	800057c <USART_SendData+0x16>


		}
	}

	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 80005ec:	bf00      	nop
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2140      	movs	r1, #64	@ 0x40
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff19 	bl	800042c <USART_GetFlagStatus>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f6      	beq.n	80005ee <USART_SendData+0x88>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <USART_SetBaudRate>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a31      	ldr	r2, [pc, #196]	@ (80006e4 <USART_SetBaudRate+0xd8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d003      	beq.n	800062a <USART_SetBaudRate+0x1e>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a30      	ldr	r2, [pc, #192]	@ (80006e8 <USART_SetBaudRate+0xdc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d103      	bne.n	8000632 <USART_SetBaudRate+0x26>
	{
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 800062a:	f7ff fe25 	bl	8000278 <RCC_GetPCLK2Value>
 800062e:	61f8      	str	r0, [r7, #28]
 8000630:	e002      	b.n	8000638 <USART_SetBaudRate+0x2c>
	}else
	{
	   PCLKx = RCC_GetPCLK1Value();
 8000632:	f7ff fdc9 	bl	80001c8 <RCC_GetPCLK1Value>
 8000636:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00b      	beq.n	800065c <USART_SetBaudRate+0x50>
	{
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000644:	69fa      	ldr	r2, [r7, #28]
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009a      	lsls	r2, r3, #2
 800064e:	441a      	add	r2, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	fbb2 f3f3 	udiv	r3, r2, r3
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	e00a      	b.n	8000672 <USART_SetBaudRate+0x66>
	}else
	{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800065c:	69fa      	ldr	r2, [r7, #28]
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009a      	lsls	r2, r3, #2
 8000666:	441a      	add	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <USART_SetBaudRate+0xe0>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2264      	movs	r2, #100	@ 0x64
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <USART_SetBaudRate+0xac>
	{
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	3332      	adds	r3, #50	@ 0x32
 80006a8:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <USART_SetBaudRate+0xe0>)
 80006aa:	fba2 2303 	umull	r2, r3, r2, r3
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e009      	b.n	80006cc <USART_SetBaudRate+0xc0>

	}else
	{
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	3332      	adds	r3, #50	@ 0x32
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <USART_SetBaudRate+0xe0>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	095b      	lsrs	r3, r3, #5
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	609a      	str	r2, [r3, #8]
}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40011400 	.word	0x40011400
 80006ec:	51eb851f 	.word	0x51eb851f

080006f0 <GPIO_Init>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; //temp register
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]


	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f994 	bl	8000a30 <GPIO_PeriClockControl>

	//1. configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d821      	bhi.n	8000754 <GPIO_Init+0x64>
	{
		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	795b      	ldrb	r3, [r3, #5]
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing the related bit fields
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	4619      	mov	r1, r3
 800072e:	2303      	movs	r3, #3
 8000730:	408b      	lsls	r3, r1
 8000732:	43db      	mvns	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	430a      	orrs	r2, r1
 800074c:	601a      	str	r2, [r3, #0]
		temp = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e0ca      	b.n	80008ea <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	795b      	ldrb	r3, [r3, #5]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d117      	bne.n	800078c <GPIO_Init+0x9c>
		{
			//1. configure the falling trigger selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075c:	4b4a      	ldr	r3, [pc, #296]	@ (8000888 <GPIO_Init+0x198>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7912      	ldrb	r2, [r2, #4]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	4611      	mov	r1, r2
 800076c:	4a46      	ldr	r2, [pc, #280]	@ (8000888 <GPIO_Init+0x198>)
 800076e:	430b      	orrs	r3, r1
 8000770:	60d3      	str	r3, [r2, #12]
			//clear the corresponding rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000772:	4b45      	ldr	r3, [pc, #276]	@ (8000888 <GPIO_Init+0x198>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	7912      	ldrb	r2, [r2, #4]
 800077a:	4611      	mov	r1, r2
 800077c:	2201      	movs	r2, #1
 800077e:	408a      	lsls	r2, r1
 8000780:	43d2      	mvns	r2, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a40      	ldr	r2, [pc, #256]	@ (8000888 <GPIO_Init+0x198>)
 8000786:	400b      	ands	r3, r1
 8000788:	6093      	str	r3, [r2, #8]
 800078a:	e035      	b.n	80007f8 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	795b      	ldrb	r3, [r3, #5]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d117      	bne.n	80007c4 <GPIO_Init+0xd4>
		{
			//1. configure the rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <GPIO_Init+0x198>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	7912      	ldrb	r2, [r2, #4]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a38      	ldr	r2, [pc, #224]	@ (8000888 <GPIO_Init+0x198>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6093      	str	r3, [r2, #8]
			//clear the corresponding falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007aa:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <GPIO_Init+0x198>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	7912      	ldrb	r2, [r2, #4]
 80007b2:	4611      	mov	r1, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	408a      	lsls	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <GPIO_Init+0x198>)
 80007be:	400b      	ands	r3, r1
 80007c0:	60d3      	str	r3, [r2, #12]
 80007c2:	e019      	b.n	80007f8 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	d115      	bne.n	80007f8 <GPIO_Init+0x108>
		{
			//1. configure both falling trigger selection register and rising trigger selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <GPIO_Init+0x198>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7912      	ldrb	r2, [r2, #4]
 80007d4:	4611      	mov	r1, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	408a      	lsls	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000888 <GPIO_Init+0x198>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <GPIO_Init+0x198>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	7912      	ldrb	r2, [r2, #4]
 80007ea:	4611      	mov	r1, r2
 80007ec:	2201      	movs	r2, #1
 80007ee:	408a      	lsls	r2, r1
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <GPIO_Init+0x198>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <GPIO_Init+0x19c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d04d      	beq.n	80008b0 <GPIO_Init+0x1c0>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <GPIO_Init+0x1a0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d032      	beq.n	8000884 <GPIO_Init+0x194>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <GPIO_Init+0x1a4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d02b      	beq.n	8000880 <GPIO_Init+0x190>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1a      	ldr	r2, [pc, #104]	@ (8000898 <GPIO_Init+0x1a8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d024      	beq.n	800087c <GPIO_Init+0x18c>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <GPIO_Init+0x1ac>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d01d      	beq.n	8000878 <GPIO_Init+0x188>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <GPIO_Init+0x1b0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d016      	beq.n	8000874 <GPIO_Init+0x184>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <GPIO_Init+0x1b4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d00f      	beq.n	8000870 <GPIO_Init+0x180>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <GPIO_Init+0x1b8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d008      	beq.n	800086c <GPIO_Init+0x17c>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <GPIO_Init+0x1bc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d101      	bne.n	8000868 <GPIO_Init+0x178>
 8000864:	2308      	movs	r3, #8
 8000866:	e024      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000868:	2300      	movs	r3, #0
 800086a:	e022      	b.n	80008b2 <GPIO_Init+0x1c2>
 800086c:	2307      	movs	r3, #7
 800086e:	e020      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000870:	2306      	movs	r3, #6
 8000872:	e01e      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000874:	2305      	movs	r3, #5
 8000876:	e01c      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000878:	2304      	movs	r3, #4
 800087a:	e01a      	b.n	80008b2 <GPIO_Init+0x1c2>
 800087c:	2303      	movs	r3, #3
 800087e:	e018      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000880:	2302      	movs	r3, #2
 8000882:	e016      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000884:	2301      	movs	r3, #1
 8000886:	e014      	b.n	80008b2 <GPIO_Init+0x1c2>
 8000888:	40013c00 	.word	0x40013c00
 800088c:	40020000 	.word	0x40020000
 8000890:	40020400 	.word	0x40020400
 8000894:	40020800 	.word	0x40020800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40021000 	.word	0x40021000
 80008a0:	40021400 	.word	0x40021400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40021c00 	.word	0x40021c00
 80008ac:	40022000 	.word	0x40022000
 80008b0:	2300      	movs	r3, #0
 80008b2:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 80008b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <GPIO_Init+0x334>)
 80008b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b8:	4a5a      	ldr	r2, [pc, #360]	@ (8000a24 <GPIO_Init+0x334>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008be:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80008c0:	7c7a      	ldrb	r2, [r7, #17]
 80008c2:	7cbb      	ldrb	r3, [r7, #18]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	fa02 f103 	lsl.w	r1, r2, r3
 80008ca:	4a57      	ldr	r2, [pc, #348]	@ (8000a28 <GPIO_Init+0x338>)
 80008cc:	7cfb      	ldrb	r3, [r7, #19]
 80008ce:	3302      	adds	r3, #2
 80008d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d4:	4b55      	ldr	r3, [pc, #340]	@ (8000a2c <GPIO_Init+0x33c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7912      	ldrb	r2, [r2, #4]
 80008dc:	4611      	mov	r1, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	408a      	lsls	r2, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a51      	ldr	r2, [pc, #324]	@ (8000a2c <GPIO_Init+0x33c>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	799b      	ldrb	r3, [r3, #6]
 80008f2:	461a      	mov	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing the related bit fields
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	4619      	mov	r1, r3
 800090c:	2303      	movs	r3, #3
 800090e:	408b      	lsls	r3, r1
 8000910:	43db      	mvns	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	400a      	ands	r2, r1
 800091a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6899      	ldr	r1, [r3, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	430a      	orrs	r2, r1
 800092a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	//3. configure the pupd setting
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	79db      	ldrb	r3, [r3, #7]
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing the related bit fields
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	400a      	ands	r2, r1
 800095e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68d9      	ldr	r1, [r3, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	430a      	orrs	r2, r1
 800096e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a1b      	ldrb	r3, [r3, #8]
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing the related bit fields
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	4619      	mov	r1, r3
 8000990:	2301      	movs	r3, #1
 8000992:	408b      	lsls	r3, r1
 8000994:	43db      	mvns	r3, r3
 8000996:	4619      	mov	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	400a      	ands	r2, r1
 800099e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6859      	ldr	r1, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	605a      	str	r2, [r3, #4]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d131      	bne.n	8000a1c <GPIO_Init+0x32c>
	{
		//configure the alternate function registers
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF<< (4 * temp2));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	7c3a      	ldrb	r2, [r7, #16]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	220f      	movs	r2, #15
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	7c3a      	ldrb	r2, [r7, #16]
 80009ea:	4001      	ands	r1, r0
 80009ec:	3208      	adds	r2, #8
 80009ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	7c3a      	ldrb	r2, [r7, #16]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a5b      	ldrb	r3, [r3, #9]
 8000a02:	461a      	mov	r2, r3
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7c3a      	ldrb	r2, [r7, #16]
 8000a14:	4301      	orrs	r1, r0
 8000a16:	3208      	adds	r2, #8
 8000a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40013c00 	.word	0x40013c00

08000a30 <GPIO_PeriClockControl>:
 * @return			- void
 *
 * @notes			-
 *****************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d15e      	bne.n	8000b00 <GPIO_PeriClockControl+0xd0>
	{
		if(pGPIOx == GPIOA)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a60      	ldr	r2, [pc, #384]	@ (8000bc8 <GPIO_PeriClockControl+0x198>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000a4a:	4b60      	ldr	r3, [pc, #384]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 8000a56:	e0b1      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOB)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8000bd0 <GPIO_PeriClockControl+0x1a0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a60:	4b5a      	ldr	r3, [pc, #360]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a59      	ldr	r2, [pc, #356]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a6c:	e0a6      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOC)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a58      	ldr	r2, [pc, #352]	@ (8000bd4 <GPIO_PeriClockControl+0x1a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a76:	4b55      	ldr	r3, [pc, #340]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a54      	ldr	r2, [pc, #336]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a82:	e09b      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOD)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a54      	ldr	r2, [pc, #336]	@ (8000bd8 <GPIO_PeriClockControl+0x1a8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d106      	bne.n	8000a9a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a4e      	ldr	r2, [pc, #312]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a98:	e090      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000bdc <GPIO_PeriClockControl+0x1ac>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d106      	bne.n	8000ab0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a49      	ldr	r2, [pc, #292]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aae:	e085      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOF)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4b      	ldr	r2, [pc, #300]	@ (8000be0 <GPIO_PeriClockControl+0x1b0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d106      	bne.n	8000ac6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ab8:	4b44      	ldr	r3, [pc, #272]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a43      	ldr	r2, [pc, #268]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000abe:	f043 0320 	orr.w	r3, r3, #32
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ac4:	e07a      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOG)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a46      	ldr	r2, [pc, #280]	@ (8000be4 <GPIO_PeriClockControl+0x1b4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d106      	bne.n	8000adc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ace:	4b3f      	ldr	r3, [pc, #252]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ada:	e06f      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOH)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a42      	ldr	r2, [pc, #264]	@ (8000be8 <GPIO_PeriClockControl+0x1b8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d106      	bne.n	8000af2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ae4:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a38      	ldr	r2, [pc, #224]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000af0:	e064      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
			GPIOI_PCLK_EN();
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a35      	ldr	r2, [pc, #212]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000afe:	e05d      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		if(pGPIOx == GPIOA)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <GPIO_PeriClockControl+0x198>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <GPIO_PeriClockControl+0xe6>
			GPIOA_PCLK_DI();
 8000b08:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b14:	e052      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd0 <GPIO_PeriClockControl+0x1a0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <GPIO_PeriClockControl+0xfc>
			GPIOB_PCLK_DI();
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a2a      	ldr	r2, [pc, #168]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b24:	f023 0302 	bic.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b2a:	e047      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOC)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a29      	ldr	r2, [pc, #164]	@ (8000bd4 <GPIO_PeriClockControl+0x1a4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <GPIO_PeriClockControl+0x112>
			GPIOC_PCLK_DI();
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	4a24      	ldr	r2, [pc, #144]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b3a:	f023 0304 	bic.w	r3, r3, #4
 8000b3e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b40:	e03c      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOD)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <GPIO_PeriClockControl+0x1a8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <GPIO_PeriClockControl+0x128>
			GPIOD_PCLK_DI();
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b50:	f023 0308 	bic.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b56:	e031      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <GPIO_PeriClockControl+0x1ac>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d106      	bne.n	8000b6e <GPIO_PeriClockControl+0x13e>
			GPIOE_PCLK_DI();
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b66:	f023 0310 	bic.w	r3, r3, #16
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b6c:	e026      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <GPIO_PeriClockControl+0x1b0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d106      	bne.n	8000b84 <GPIO_PeriClockControl+0x154>
			GPIOF_PCLK_DI();
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b7c:	f023 0320 	bic.w	r3, r3, #32
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b82:	e01b      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOG)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <GPIO_PeriClockControl+0x1b4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <GPIO_PeriClockControl+0x16a>
			GPIOG_PCLK_DI();
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b96:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b98:	e010      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
		else if(pGPIOx == GPIOH)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <GPIO_PeriClockControl+0x1b8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <GPIO_PeriClockControl+0x180>
			GPIOH_PCLK_DI();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bae:	e005      	b.n	8000bbc <GPIO_PeriClockControl+0x18c>
			GPIOI_PCLK_DI();
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <GPIO_PeriClockControl+0x19c>)
 8000bb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00

08000bec <sw_delay>:
void USART2_GPIO_Init(void);
void USART2_Init(void);


void sw_delay(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i <500000/2; i++);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e002      	b.n	8000bfe <sw_delay+0x12>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <sw_delay+0x28>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d9f8      	bls.n	8000bf8 <sw_delay+0xc>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	0003d08f 	.word	0x0003d08f

08000c18 <main>:


int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
		USART2_GPIO_Init();
 8000c1e:	f000 f83f 	bl	8000ca0 <USART2_GPIO_Init>

		USART2_Init();
 8000c22:	f000 f85f 	bl	8000ce4 <USART2_Init>

		USART_PeripheralControl(USART2, ENABLE);
 8000c26:	2101      	movs	r1, #1
 8000c28:	4819      	ldr	r0, [pc, #100]	@ (8000c90 <main+0x78>)
 8000c2a:	f7ff fbe3 	bl	80003f4 <USART_PeripheralControl>

		TxData[0] = 0x55; //sync field
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <main+0x7c>)
 8000c30:	2255      	movs	r2, #85	@ 0x55
 8000c32:	701a      	strb	r2, [r3, #0]
		TxData[1] = PID_Calculate(0x34);
 8000c34:	2034      	movs	r0, #52	@ 0x34
 8000c36:	f000 f879 	bl	8000d2c <PID_Calculate>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <main+0x7c>)
 8000c40:	705a      	strb	r2, [r3, #1]

		for(int i= 0; i < 8; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	e008      	b.n	8000c5a <main+0x42>
		{
			TxData[i + 2] = i;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	b2d1      	uxtb	r1, r2
 8000c50:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <main+0x7c>)
 8000c52:	54d1      	strb	r1, [r2, r3]
		for(int i= 0; i < 8; i++)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	ddf3      	ble.n	8000c48 <main+0x30>
		}

		TxData[10] = Checksum_Calculate(TxData[1], TxData+2, 8);
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <main+0x7c>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <main+0x80>)
 8000c66:	2208      	movs	r2, #8
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f8ac 	bl	8000dc6 <Checksum_Calculate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <main+0x7c>)
 8000c74:	729a      	strb	r2, [r3, #10]

		while(1)
		{
			USART_LIN_Handle.pUSARTx->CR2 = 1 << USART_CR1_SBK;
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <main+0x84>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	611a      	str	r2, [r3, #16]
			USART_SendData(&USART_LIN_Handle, TxData, 10);
 8000c7e:	220a      	movs	r2, #10
 8000c80:	4904      	ldr	r1, [pc, #16]	@ (8000c94 <main+0x7c>)
 8000c82:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <main+0x84>)
 8000c84:	f7ff fc6f 	bl	8000566 <USART_SendData>
			sw_delay();
 8000c88:	f7ff ffb0 	bl	8000bec <sw_delay>
			USART_LIN_Handle.pUSARTx->CR2 = 1 << USART_CR1_SBK;
 8000c8c:	bf00      	nop
 8000c8e:	e7f2      	b.n	8000c76 <main+0x5e>
 8000c90:	40004400 	.word	0x40004400
 8000c94:	20000058 	.word	0x20000058
 8000c98:	2000005a 	.word	0x2000005a
 8000c9c:	20000030 	.word	0x20000030

08000ca0 <USART2_GPIO_Init>:
	return 0;
}


void USART2_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

	GPIO_Handle_t USART_LIN_GPIO_Handle;

	USART_LIN_GPIO_Handle.pGPIOx = GPIOA;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <USART2_GPIO_Init+0x40>)
 8000ca8:	607b      	str	r3, [r7, #4]
	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000caa:	2302      	movs	r3, #2
 8000cac:	727b      	strb	r3, [r7, #9]
	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	733b      	strb	r3, [r7, #12]
	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	72bb      	strb	r3, [r7, #10]
	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	72fb      	strb	r3, [r7, #11]
	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	737b      	strb	r3, [r7, #13]

	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_LIN_GPIO_Handle);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd13 	bl	80006f0 <GPIO_Init>

	USART_LIN_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_LIN_GPIO_Handle);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fd0d 	bl	80006f0 <GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <USART2_Init>:


void USART2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0




	USART_LIN_Handle.pUSARTx = USART2;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <USART2_Init+0x40>)
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <USART2_Init+0x44>)
 8000cec:	601a      	str	r2, [r3, #0]
	USART_LIN_Handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <USART2_Init+0x40>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cf4:	609a      	str	r2, [r3, #8]
	USART_LIN_Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <USART2_Init+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	73da      	strb	r2, [r3, #15]
	USART_LIN_Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <USART2_Init+0x40>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	711a      	strb	r2, [r3, #4]
	USART_LIN_Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <USART2_Init+0x40>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	731a      	strb	r2, [r3, #12]
	USART_LIN_Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <USART2_Init+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	735a      	strb	r2, [r3, #13]
	USART_LIN_Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <USART2_Init+0x40>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	739a      	strb	r2, [r3, #14]
	USART_LIN_Handle.USART_Config.USART_LINMode = USART_LIN_MODE_ENABLE;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <USART2_Init+0x40>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	741a      	strb	r2, [r3, #16]
	USART_Init(&USART_LIN_Handle);
 8000d1a:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <USART2_Init+0x40>)
 8000d1c:	f7ff fb9d 	bl	800045a <USART_Init>




}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000030 	.word	0x20000030
 8000d28:	40004400 	.word	0x40004400

08000d2c <PID_Calculate>:


uint8_t PID_Calculate(uint8_t ID)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t ID_Buf[6];
	uint8_t P0;
	uint8_t P1;

	if(ID > 0x3F)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d3a:	d83d      	bhi.n	8000db8 <PID_Calculate+0x8c>
	{
		//do nothing
	}
	else
	{
		for(int i = 0; i < 6; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00e      	b.n	8000d60 <PID_Calculate+0x34>
		{
			ID_Buf[i] = ((ID >> 1) & (uint8_t)0x01);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	085b      	lsrs	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2d9      	uxtb	r1, r3
 8000d4e:	f107 020c 	add.w	r2, r7, #12
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	4413      	add	r3, r2
 8000d56:	460a      	mov	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 6; i++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	dded      	ble.n	8000d42 <PID_Calculate+0x16>
		}

	P0 = ( (ID_Buf[0] ^ ID_Buf[1] ^ ID_Buf[2] ^ ID_Buf[4]) & (uint8_t)0x01 );
 8000d66:	7b3a      	ldrb	r2, [r7, #12]
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	4053      	eors	r3, r2
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	4053      	eors	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	7c3b      	ldrb	r3, [r7, #16]
 8000d76:	4053      	eors	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	74fb      	strb	r3, [r7, #19]
	P1 = ~( (ID_Buf[1] ^ ID_Buf[3] ^ ID_Buf[4] ^ ID_Buf[5]) & (uint8_t)0x01 );
 8000d80:	7b7a      	ldrb	r2, [r7, #13]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	4053      	eors	r3, r2
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	7c3b      	ldrb	r3, [r7, #16]
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	7c7b      	ldrb	r3, [r7, #17]
 8000d90:	4053      	eors	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	74bb      	strb	r3, [r7, #18]

	ID = ID | ( P0 << 6 ) | (P1 << 7 );
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	7cbb      	ldrb	r3, [r7, #18]
 8000dae:	01db      	lsls	r3, r3, #7
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	71fb      	strb	r3, [r7, #7]
	}

	return ID;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <Checksum_Calculate>:



uint8_t Checksum_Calculate(uint8_t PID, uint8_t *pData, uint8_t size)
{
 8000dc6:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	71bb      	strb	r3, [r7, #6]
 8000dd8:	466b      	mov	r3, sp
 8000dda:	4618      	mov	r0, r3
	uint8_t buffer[size + 2];
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	1c99      	adds	r1, r3, #2
 8000de0:	1e4b      	subs	r3, r1, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	460a      	mov	r2, r1
 8000de6:	2300      	movs	r3, #0
 8000de8:	4690      	mov	r8, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e00:	460a      	mov	r2, r1
 8000e02:	2300      	movs	r3, #0
 8000e04:	4614      	mov	r4, r2
 8000e06:	461d      	mov	r5, r3
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	00eb      	lsls	r3, r5, #3
 8000e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e16:	00e2      	lsls	r2, r4, #3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	3307      	adds	r3, #7
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	ebad 0d03 	sub.w	sp, sp, r3
 8000e24:	466b      	mov	r3, sp
 8000e26:	3300      	adds	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
	uint16_t sum = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	83fb      	strh	r3, [r7, #30]

	buffer[0] = PID;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < size; i++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	e00a      	b.n	8000e50 <Checksum_Calculate+0x8a>
	{
		buffer[i + 1] = pData[i];
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	441a      	add	r2, r3
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3301      	adds	r3, #1
 8000e44:	7811      	ldrb	r1, [r2, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size; i++)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <Checksum_Calculate+0x74>
	}

	for(int i = 0; i < size + 1; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e010      	b.n	8000e80 <Checksum_Calculate+0xba>
	{
		sum = sum + buffer[i];
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	8bfb      	ldrh	r3, [r7, #30]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	83fb      	strh	r3, [r7, #30]

		if(sum > 0xFF)
 8000e6e:	8bfb      	ldrh	r3, [r7, #30]
 8000e70:	2bff      	cmp	r3, #255	@ 0xff
 8000e72:	d902      	bls.n	8000e7a <Checksum_Calculate+0xb4>
		{
			sum = sum - 0xFF;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	3bff      	subs	r3, #255	@ 0xff
 8000e78:	83fb      	strh	r3, [r7, #30]
	for(int i = 0; i < size + 1; i++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	ddea      	ble.n	8000e5e <Checksum_Calculate+0x98>
		}
	}

	sum = 0xFF - sum;
 8000e88:	8bfb      	ldrh	r3, [r7, #30]
 8000e8a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000e8e:	83fb      	strh	r3, [r7, #30]

	return sum;
 8000e90:	8bfb      	ldrh	r3, [r7, #30]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4685      	mov	sp, r0


}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	@ (8000edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f000 f811 	bl	8000ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fe9f 	bl	8000c18 <main>

08000eda <LoopForever>:

LoopForever:
  b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   r0, =_estack
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ee8:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 8000eec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ef0:	2000006c 	.word	0x2000006c

08000ef4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <__libc_init_array>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	4d0d      	ldr	r5, [pc, #52]	@ (8000f30 <__libc_init_array+0x38>)
 8000efc:	4c0d      	ldr	r4, [pc, #52]	@ (8000f34 <__libc_init_array+0x3c>)
 8000efe:	1b64      	subs	r4, r4, r5
 8000f00:	10a4      	asrs	r4, r4, #2
 8000f02:	2600      	movs	r6, #0
 8000f04:	42a6      	cmp	r6, r4
 8000f06:	d109      	bne.n	8000f1c <__libc_init_array+0x24>
 8000f08:	4d0b      	ldr	r5, [pc, #44]	@ (8000f38 <__libc_init_array+0x40>)
 8000f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000f3c <__libc_init_array+0x44>)
 8000f0c:	f000 f818 	bl	8000f40 <_init>
 8000f10:	1b64      	subs	r4, r4, r5
 8000f12:	10a4      	asrs	r4, r4, #2
 8000f14:	2600      	movs	r6, #0
 8000f16:	42a6      	cmp	r6, r4
 8000f18:	d105      	bne.n	8000f26 <__libc_init_array+0x2e>
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
 8000f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f20:	4798      	blx	r3
 8000f22:	3601      	adds	r6, #1
 8000f24:	e7ee      	b.n	8000f04 <__libc_init_array+0xc>
 8000f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2a:	4798      	blx	r3
 8000f2c:	3601      	adds	r6, #1
 8000f2e:	e7f2      	b.n	8000f16 <__libc_init_array+0x1e>
 8000f30:	08000f58 	.word	0x08000f58
 8000f34:	08000f58 	.word	0x08000f58
 8000f38:	08000f58 	.word	0x08000f58
 8000f3c:	08000f5c 	.word	0x08000f5c

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr
